# DO NOT EDIT - AUTOMATICALLY GENERATED BY tests/make_test_stubs.py!
from __future__ import annotations
from typing import List
from typing import (
    Optional,
    Union,
)


def Archimedes(L: float, rhof: float, rhop: float, mu: float, g: float = ...) -> float: ...


def Bejan_L(dP: float, L: float, mu: float, alpha: float) -> float: ...


def Bejan_p(dP: float, K: float, mu: float, alpha: float) -> float: ...


def Biot(h: float, L: float, k: float) -> float: ...


def Boiling(G: float, q: float, Hvap: float) -> float: ...


def Bond(rhol: float, rhog: float, sigma: float, L: float) -> float: ...


def C2F(C: float) -> float: ...


def C2K(C: float) -> float: ...


def C2R(C: float) -> float: ...


def Capillary(V: float, mu: float, sigma: float) -> float: ...


def Cavitation(P: float, Psat: float, rho: float, V: float) -> float: ...


def Confinement(D: float, rhol: float, rhog: float, sigma: float, g: float = ...) -> float: ...


def Dean(Re: float, Di: float, D: float) -> float: ...


def Drag(F: float, A: float, V: float, rho: float) -> float: ...


def Eckert(V: float, Cp: float, dT: float) -> float: ...


def Euler(dP: float, rho: float, V: float) -> float: ...


def F2C(F: float) -> float: ...


def F2K(F: float) -> float: ...


def F2R(F: float) -> float: ...


def Fourier_heat(
    t: float,
    L: float,
    rho: Optional[float] = ...,
    Cp: Optional[float] = ...,
    k: Optional[float] = ...,
    alpha: Optional[float] = ...
) -> float: ...


def Fourier_mass(t: float, L: float, D: float) -> float: ...


def Froude(V: float, L: float, g: float = ..., squared: bool = ...) -> float: ...


def Froude_densimetric(
    V: float,
    L: float,
    rho1: float,
    rho2: float,
    heavy: bool = ...,
    g: float = ...
) -> float: ...


def Graetz_heat(
    V: float,
    D: float,
    x: float,
    rho: Optional[float] = ...,
    Cp: Optional[float] = ...,
    k: Optional[float] = ...,
    alpha: Optional[float] = ...
) -> float: ...


def Grashof(
    L: float,
    beta: float,
    T1: float,
    T2: float = ...,
    rho: Optional[float] = ...,
    mu: Optional[float] = ...,
    nu: Optional[float] = ...,
    g: float = ...
) -> float: ...


def Hagen(Re: float, fd: float) -> float: ...


def Jakob(Cp: float, Hvap: float, Te: float) -> float: ...


def K2C(K: float) -> float: ...


def K2F(K: float) -> float: ...


def K2R(K: float) -> float: ...


def K_from_L_equiv(L_D: float, fd: float = ...) -> float: ...


def K_from_f(fd: float, L: float, D: float) -> float: ...


def Knudsen(path: float, L: float) -> float: ...


def L_equiv_from_K(K: float, fd: float = ...) -> float: ...


def L_from_K(K: float, D: float, fd: float = ...) -> float: ...


def Lewis(
    D: Optional[float] = ...,
    alpha: Optional[float] = ...,
    Cp: Optional[float] = ...,
    k: Optional[float] = ...,
    rho: Optional[float] = ...
) -> float: ...


def Mach(V: float, c: float) -> float: ...


def Morton(rhol: float, rhog: float, mul: float, sigma: float, g: float = ...) -> float: ...


def Nusselt(h: float, L: float, k: float) -> float: ...


def Ohnesorge(L: float, rho: float, mu: float, sigma: float) -> float: ...


def P_from_head(head: float, rho: float, g: float = ...) -> float: ...


def Peclet_heat(
    V: float,
    L: float,
    rho: Optional[float] = ...,
    Cp: Optional[float] = ...,
    k: Optional[float] = ...,
    alpha: Optional[float] = ...
) -> float: ...


def Peclet_mass(V: float, L: float, D: float) -> float: ...


def Power_number(P: float, L: float, N: float, rho: float) -> float: ...


def Prandtl(
    Cp: Optional[float] = ...,
    k: Optional[float] = ...,
    mu: Optional[float] = ...,
    nu: Optional[float] = ...,
    rho: Optional[float] = ...,
    alpha: Optional[float] = ...
) -> float: ...


def R2C(Ra: float) -> float: ...


def R2F(Ra: float) -> float: ...


def R2K(Ra: float) -> float: ...


def Rayleigh(Pr: float, Gr: float) -> float: ...


def Reynolds(
    V: float,
    D: float,
    rho: Optional[float] = ...,
    mu: Optional[float] = ...,
    nu: Optional[float] = ...
) -> float: ...


def Schmidt(D: float, mu: Optional[float] = ..., nu: Optional[float] = ..., rho: Optional[float] = ...) -> float: ...


def Sherwood(K: float, L: float, D: float) -> float: ...


def Stanton(h: float, V: float, rho: float, Cp: float) -> float: ...


def Stokes_number(V: float, Dp: float, D: float, rhop: float, mu: float) -> float: ...


def Strouhal(f: float, L: float, V: float) -> float: ...


def Suratman(L: float, rho: float, mu: float, sigma: float) -> float: ...


def Weber(V: float, L: float, rho: float, sigma: float) -> float: ...


def c_ideal_gas(T: float, k: float, MW: float) -> float: ...


def dP_from_K(K: float, rho: float, V: float) -> float: ...


def gravity(latitude: float, H: float) -> float: ...


def head_from_K(K: float, V: float, g: float = ...) -> float: ...


def head_from_P(P: float, rho: float, g: float = ...) -> float: ...


def nu_mu_converter(rho: float, mu: Optional[float] = ..., nu: Optional[float] = ...) -> float: ...


def relative_roughness(D: float, roughness: float = ...) -> float: ...


def thermal_diffusivity(k: float, rho: float, Cp: float) -> float: ...

__all__: List[str]