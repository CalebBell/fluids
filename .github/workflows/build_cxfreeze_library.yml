name: Check cx_Freeze Compatibility

on:
  push:
    branches: [release]
  pull_request:
    branches: [master, release]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/master' && github.ref != 'refs/heads/release' }}

jobs:
  build:

    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.13']
        os: [windows-latest, ubuntu-latest, macos-15-intel, macos-latest]

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }} ${{ matrix.architecture }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        architecture: ${{ matrix.architecture }}

    - name: Install uv
      uses: astral-sh/setup-uv@v7
      with:
        enable-cache: true
        cache-dependency-glob: "pyproject.toml"

    - name: Install Ubuntu dependencies
      if: startsWith(runner.os, 'Linux')
      run: |
        # Taken from scipy
        sudo apt-get update
        sudo apt-get install -y libopenblas-dev libatlas-base-dev liblapack-dev gfortran libgmp-dev libmpfr-dev libsuitesparse-dev ccache libmpc-dev

    - name: Install dependencies
      run: |
        python -c "import platform; print(platform.platform()); print(platform.architecture())"
        uv pip install --system -e .[test]
        uv pip install --system cx_Freeze

    - name: Build cx_Freeze executable
      shell: bash
      run: |
        cd dev
        python cx_freeze_basic_standalone_check_builder.py build
        cd ..

    - name: Test build on Linux/macOS
      if: runner.os != 'Windows'
      run: |
        ./dev/build/exe.*/basic_standalone_fluids_check

    - name: Test build on Windows
      if: runner.os == 'Windows'
      shell: bash
      run: |
        ./dev/build/exe.*/basic_standalone_fluids_check.exe
